slug: pe-deploy-and-discover-2-1
id: y8mpb4sleibk
type: sandbox
title: 'PE Deploy and Discover - Lab 2.1: Configure Autosigning'
teaser: Learn how to automate installation on new nodes using autosigning.
description: |-
  # We're putting the finishing touches on this BETA Puppet Practice Lab — go ahead and take a peek!

  Please help us find any bugs that need to be zapped and share your feedback for improving this learning experience by clicking the **Bug Zapper** tab at the top of each challenge and completing the short survey.

  We welcome your suggestions and value your feedback. If you have additional comments or suggestions after completing this BETA Puppet Practice Lab, please [reach out to us directly](mailto:education@puppet.com).
  ___

  **What you'll learn**

  In this lab, you'll learn how to configure Puppet policy-based autosigning to securely automate Puppet installation on new nodes, thus eliminating a mundane task and making deployment faster.

  **Prerequisites**

  None

  **Before you start**

  Keep an eye on the clock. You have 30 minutes to complete this lab. After 30 minutes, your learning environment expires and your work will not be saved. If you haven't completed the lab, you can simply restart it. Click **Start track** when you're ready to begin.
icon: https://storage.googleapis.com/instruqt-images/bz-smallicon-1.png
tags:
- deploy-and-discover
owner: puppet
developers:
- greg.larkin@puppet.com
private: true
published: true
show_timer: true
challenges:
- slug: configure-autosigning
  id: jfhy7qsxgss1
  type: challenge
  title: Configure autosigning
  teaser: Install the PE agent with autosigning enabled
  notes:
  - type: text
    contents: |-
      In this lab you will:

      * Configure autosigning to allow nodes to be automatically added to the primary server.
      * Use the frictionless installation script to install an agent and have it automatically signed using a challenge password.

      Click **Start** when you're ready to begin.
  assignment: |
    1. On the **Primary Server** tab, navigate to
    ```
    cd /etc/puppetlabs/puppet
    ```
    2. Create and edit the autosign.rb file:
    ```
    vim autosign.rb
    ```
    3. Paste the following content into the file, then save and exit the file (`ESC`, `:wq`):
    ```
    #!/opt/puppetlabs/puppet/bin/ruby
    #
    # A note on logging:
    #   This script's stderr and stdout are only shown at the DEBUG level
    #   of the server's logs. This means you won't see the error messages
    #   in puppetserver.log by default. All you'll see is the exit code.
    #
    #   https://docs.puppet.com/puppet/latest/ssl_autosign.html#policy-executable-api
    #
    # Exit Codes:
    #   0 - A matching challengePassword was found.
    #   1 - No challengePassword was found.
    #   2 - The wrong challengePassword was found.
    #
    require 'puppet/ssl'

    csr = Puppet::SSL::CertificateRequest.from_s(STDIN.read)
    psk = File.read('/etc/puppetlabs/puppet/psk').chomp.strip

    if pass = csr.custom_attributes.find do |attribute|
         ['challengePassword', '1.2.840.113549.1.9.7'].include? attribute['oid']
       end
    else
      puts 'No challengePassword found. Rejecting certificate request.'
      exit 1
    end

    if pass['value'] == psk
      exit 0
    else
      puts "challengePassword does not match: #{pass['value']}"
      exit 2
    end
    ```

    4. Set the script permissions to executable and set the owner/group to `pe-puppet:pe-puppet`:

    ```
    chmod +x /etc/puppetlabs/puppet/autosign.rb
    chown pe-puppet:pe-puppet /etc/puppetlabs/puppet/autosign.rb
    ```

    5. Create and edit the PSK file:
    ```
    vim psk
    ```

    7. Paste the following content into the file, then save and exit the file (`ESC`, `:wq`):

    ```
    PASSWORD_FOR_AUTOSIGNER_SCRIPT
    ```

    8. Lock down the key file permissions and set the owner/group to `pe-puppet:pe-puppet`. On the **Puppet** tab, run:

    ```
    chmod 600 /etc/puppetlabs/puppet/psk
    chown pe-puppet:pe-puppet /etc/puppetlabs/puppet/psk
    ```

    9. Configure the primary server to enable autosigning with `autosign.rb` by running:

    ```
    puppet config set autosign /etc/puppetlabs/puppet/autosign.rb
    ```

    10. Restart the primary server:

    ```
    sudo service pe-puppetserver restart
    ```

    11. On the **Linux agent** tab, install the Puppet agent by using the installation script with the `custom_attributes:challengePassword` parameter:

    ```
    uri='https://puppet:8140/packages/current/install.bash'
    curl --insecure "$uri" | bash -s custom_attributes:challengePassword=PASSWORD_FOR_AUTOSIGNER_SCRIPT
    ```

    12. After installation is complete, switch to the **PE Console** tab and log in with username `admin` and password `puppetlabs`.

    13. From the console sidebar, navigate to the **Nodes** page and validate that the `nixagent` node is now being managed by Puppet Enterprise.

    14. Click on the **nixagent** node, and inspect its facts under the **Facts** tab.

    Congratulations! You installed the PE agent with autosigning enabled.

    **Find bugs or have feedback? Click the Bug Zapper tab near the top of the page and let us know!**

    To close this lab, click **Next**.
  tabs:
  - title: Primary Server
    type: terminal
    hostname: puppet
  - title: PE Console
    type: service
    hostname: puppet
    port: 443
  - title: Linux Agent
    type: terminal
    hostname: nixagent
  - title: Windows Agent
    type: service
    hostname: guac
    path: /#/client/c/winagent?username=instruqt&password=Passw0rd!
    port: 8080
  - title: "Bug Zapper \U0001F99F⚡"
    type: website
    hostname: guac
    url: https://docs.google.com/forms/d/e/1FAIpQLSe6525nHrz5FRpniKPvllcYfyDOQRl6St9wvW-wKErvmt8RSg/viewform?embedded=true
  difficulty: basic
  timelimit: 1200
checksum: "1270060615625118376"
