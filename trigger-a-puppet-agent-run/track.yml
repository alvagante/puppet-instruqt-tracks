slug: trigger-a-puppet-agent-run
id: un8tjaoc0dh6
type: track
title: Trigger a Puppet Agent Run
teaser: Manually trigger a Puppet run on a signed agent node and review the process
  of the run.
description: |-
  The 'puppet resource' command you explored in the previous challenge let you see a system the way Puppet does — through the *resource abstraction layer* (RAL). The RAL provides a single common language for your Puppet server to manage all the systems in your infrastructure.


  **Why complete this track?**
  In this track, you'll walk through a Puppet agent run to understand how the agent communicates with the Puppet server.

  You'll learn how to:
  List and sign agent certificates.
  Interpret a Puppet agent run.
  Write code in the server's site.pp manifest to classify a node and begin defining its desired state.

  **Keep an eye on the clock!**
  You will have 30 minutes to complete this track. At the end of 30 minutes, your learning environment will automatically expire and your work will not be saved. If you have not completed the track, you can restart the track and skip to any challenge.
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/puppet.png
level: beginner
tags:
- Puppet agent
- ' agent run'
- ' node classification'
- ' site.pp'
- ' manifest'
owner: puppet
developers:
- bart.kliebert@puppet.com
- greg.larkin@puppet.com
private: true
published: false
challenges:
- slug: sign-a-certificate
  id: dty1ff36osqi
  type: challenge
  title: "Sign a Certificate \U0001F4BB"
  teaser: Sign a certificate on an unsigned agent node so that the Puppet server can
    validate the node before authorizing communication.
  notes:
  - type: text
    contents: |-
      # How Puppet agents and the server communicate
      The Puppet server and agent communicate over a secure SSL connection. Before the server can communicate with an agent, it verifies that the node’s certificate is signed.

      The Puppet server accepts catalog compilation requests only from agent nodes with signed certificates.

      ## **Start this track**
      When your environment has finished spinning up, you'll see a green **Start** button at the bottom of the screen. Click it when you're ready to begin the track.
  assignment: |-
    # Step 1: Switch to the node
    Switch to the *Agent node* tab to the right so that you can run tasks from the node's command line.

    # Step 2: Trigger a run
    Run the following command to trigger a Puppet agent run on the node, whose certificate is not signed.
    ```
    puppet agent -t
    ```
    ✔️ **Result:** The Puppet run fails. The agent attempts to contact the Puppet server, but the server rejects the request. No problem: You just have to sign the agent node's certificate.

    # A note on autosigning
    As your infrastructure grows, you’ll likely use the Puppet Enterprise (PE) graphical console for certificate management, or enable autosigning so that you can sign many certificates at a time. However, in this practice lab, you'll sign a certificate manually from the command line, sufficient for signing a few certificates at a time (for example, in a demo environment).

    # Step 3: Use the Puppet server to list unsigned certificates
    Switch back to the *Puppet server* tab and use the `puppetserver ca` tool to list unsigned certificates:
    ```
    puppetserver ca list
    ```
    Take note of the name of the unsigned node, `linux-node.classroom.puppet.com`.

    # Step 4: Sign the certificate
    Run the following command:
    ```
    puppetserver ca sign --certname linux-node.classroom.puppet.com
    ```
    Notice you are specifying the name of the node (`linux-node.classroom.puppet.com`) in the command.

    ✔️ **Result:** The Puppet agent on `linux-node.classroom.puppet.com` is now authorized to request the catalog from the Puppet server.

    # Step 5: Go back to the node and trigger another run
    Switch back to the *Agent node* tab and run the following command again:
    ```
    puppet agent -t
    ```
    ✔️ **Result:** The agent completes a successful run.

    In the next challenge, you'll examine the output to understand the process Puppet follows during a Puppet run.
  tabs:
  - title: Puppet server
    type: terminal
    hostname: puppet
  - title: Agent node
    type: terminal
    hostname: linux-node
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 300
- slug: trigger-a-puppet-run
  id: xbnzl6tqkedg
  type: challenge
  title: "Trigger a Puppet Run \U0001F4BB"
  teaser: Manually trigger a Puppet run and analyze the system output.
  notes:
  - type: text
    contents: |-
      # Manual vs automatic Puppet runs
      By default, the Puppet agent service initiates a Puppet run every 30 minutes. Because it's difficult to demonstrate Puppet with these scheduled background runs, we disabled the Puppet agent service on your agent system.

      In these challenges, you’ll use the `puppet agent -t` command to manually trigger a run.

      When you’re ready to begin, click **Start**.
  assignment: |-
    Now that the agent's certificate is signed, the Puppet agent will retrieve a catalog from the Puppet server on the next run. To see this, trigger a run now.

    # Step 1: Swith to the node
    Switch to the *Agent node* tab to the right so that you can run tasks from the node's command line.

    # Step 2: Trigger the run
    Run the following command to trigger a puppet run:
    ```
    puppet agent -t
    ```
    ✔️ **Result:** Because the certificate is signed, the agent has permission to retrieve the catalog from the Puppet server.

    ## **What’s with all that text?**

    Most of the text scrolling by is from a process called `pluginsync`. During `pluginsync`, any extensions installed on the server (such as custom facts, resource types, or providers) are copied to the Puppet agent *before* the run. This ensures that the agent has all the tools it needs to correctly apply the catalog.

    # Step 3: Analyze the output
    The `pluginsync` process adds a lot of clutter, but you'll focus on the three lines that look like the following:
    ```
    Info: Loading facts
    Info: Caching catalog for agent.puppet.vm
    Info: Applying configuration version '1464919481'
    ```
    This output shows you one side of the conversation between the agent and server:
    1. The Puppet agent loads the facts (the details of the system the agent runs on) with the Puppet server.
    2. The agent receives a new catalog and caches a copy of it.

          ✏️ **Note:**   You can configure the Puppet agent to fail over to this cached catalog if it can't connect to the server.

    3. Finally, the Puppet agent applies the catalog. After this step, you typically see a list of all the changes that the agent made. In this case, the Puppet server didn't find any Puppet code to apply to the agent node, and it didn't make any changes (other than those involved in pluginsync) during this run.

    # That’s it?
    Don’t worry, you’ll do something more interesting in the next challenge by specifying a desired state for some of the resources on the node.
  tabs:
  - title: Puppet server
    type: terminal
    hostname: puppet
  - title: Agent node
    type: terminal
    hostname: linux-node
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 300
- slug: specify-a-desired-state
  id: zkwun505nnze
  type: challenge
  title: "Specify a Desired State \U0001F4BB"
  teaser: Specify a desired state for a resource by adding a node definition to the
    `site.pp` manifest.
  notes:
  - type: text
    contents: |-
      # Node classification
      When the Puppet server service receives a catalog request from an agent node with a valid certificate, it begins a process called *node classification* to determine what Puppet code to compile to generate a catalog for the agent node. It gets this information from the agent’s `site.pp` manifest file.

      ## **The site.pp manifest**
      The `site.pp` manifest is a special file on the Puppet server where you can write node definitions and specify your nodes' desired states.

      > **Node**: In the Puppet world, a *node* is any system or device in your infrastructure.

      > **Node definition**: Defines how the Puppet server should manage a given system. When an agent contacts the server, the server checks the `site.pp` manifest for node definitions that match the node name.

      You'll use this method in subsequent challenges — it's the easiest way to see how node classification works. However, you can also get node classification info in the PE console.

      When you’re ready to begin, click **Start**.
  assignment: |-
    # Step 1: Open the manifest file
    Switch to the *Editor* tab and click on the only item in the **FILES** list, your `site.pp` manifest file.

    # Step 2: Start with a code block
    Add the following code to the node definition section at bottom of the manifest:
    ```
    node 'linux-node.classroom.puppet.com' {

    }
    ```

    # Step 3: Add a resource declaration
    So far, you’ve entered only a code outline. Typically, you would include one or more *class declarations* inside this `node` block. You'll learn about classes in the next learning track.

    For now, simply write a resource declaration directly into the node definition so that your code looks like this:

    ```
    node 'linux-node.classroom.puppet.com' {
      notify { 'Hello Puppet!': }
    }
    ```

    # Step 4: Save your changes
    Click the disk icon: <img src="https://education-downloads.s3-us-west-2.amazonaws.com/instruqt-assets/Build+a+Bolt+Inventory+File+on+Linux/save-icon.png">

    ✔️ **Result:** The `site.pp` manifest file is updated. Now, when the agent contacts the server, the server encounters the node definition in this code block and uses it to compile a catalog for this node.

    # Step 5: Trigger an agent run
    Now that you have some Puppet code for the server to parse, switch to the *Agent node* tab to the right and trigger a Puppet run:
    ```
    puppet agent -t
    ```

    ✏️ **Note:**  In this example, the catalog will include only a `notify` resource type, which tells the agent to display `Hello Puppet!` when it applies the catalog on its next run. This code doesn't make any changes to the node.

    ✔️ **Result:** The output from the Puppet run will include the following:

    ```
    Notice: Hello Puppet!
    Notice: /Stage[main]/Main/Node[agent.puppet.vm]/Notify[Hello Puppet!]/message: defined 'message' as 'Hello Puppet!'
    ```
  tabs:
  - title: Puppet server
    type: terminal
    hostname: puppet
  - title: Agent node
    type: terminal
    hostname: linux-node
  - title: Editor
    type: code
    hostname: puppet
    path: /etc/puppetlabs/code/environments/production/manifests/site.pp
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 450
- slug: knowledge-check
  id: jgcl5sswpk3h
  type: challenge
  title: "Knowledge Check \U0001F4A1"
  teaser: Test your knowledge to make sure you’ve got it down.
  notes:
  - type: text
    contents: |
      # Great job!

      Next, check your knowledge to make sure you've got it down.

      Click **Start** when you're ready.
  assignment: |-
    Answer the questions and then click **CHECK YOUR ANSWERS** to see how you did.

    When you're done with the knowledge check, click **Check** to continue.
  tabs:
  - title: Knowledge Check
    type: website
    hostname: puppet
    url: https://survey.alchemer.com/s3/6339641/Puppet-Practice-Labs-Trigger-a-Puppet-Agent-Run
  difficulty: basic
  timelimit: 360
- slug: wrapup-and-feedback
  id: tgxcnqzczuoo
  type: challenge
  title: "Wrap-up and Feedback \U0001F4AC"
  teaser: Recap what you learned and tell us what you think.
  notes:
  - type: text
    contents: |-
      # Excellent! You’re nearly done!

      Click **Start** to review what you learned and let us know what you thought of this track.
  assignment: |-
    In this lab, you learned how the Puppet server and agent communicate during an agent run.

    You learned how to:
    1. List and sign agent certificates.
    1. Manually trigger a Puppet run and interpret the output.
    1. Write code in the server's `site.pp` manifest to classify a node and specify its desired state.

    Want to learn more about Puppet Enterprise? Check out these resources:
    - [Puppet Enterprise Docs](https://puppet.com/docs/pe/latest)
    - [Puppet Compass](https://learn.puppet.com/)
    - [Puppet Community Slack](https://slack.puppet.com/)

    To access the commands used throughout this lab, visit the companion [Lab Aid](link).

    Click **Check** to close this track.
  tabs:
  - title: Wrap-up and Feedback
    type: website
    hostname: puppet
    url: https://survey.alchemer.com/s3/6263245/Practice-Lab-Feedback-Survey
  difficulty: basic
  timelimit: 360
checksum: "7934664274875615953"
